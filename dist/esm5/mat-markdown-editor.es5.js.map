{"version":3,"file":"mat-markdown-editor.es5.js","sources":["../../tmp/module/utils/index.ts","../../tmp/module/editor/editor.component.ts","../../tmp/module/service/lib.service.ts","../../tmp/module/material.module.ts","../../tmp/module/editor/toolbar/toolbar.component.ts","../../tmp/module/lib.module.ts"],"sourcesContent":["declare let hljs: any;\n\nexport function markDownListItem(text: string): string {\n  if (!/^\\s*\\[[x ]]\\s*/.test(text)) {\n    return `<li>${text}</li>`;\n  } else {\n    text = text\n      .replace(\n        /^\\s*\\[ ]\\s*/,\n        '<i class=\"material-icons\" style=\"vertical-align:top;margin-bottom:0.2em;margin-left:-0.8em;\">check_box_outline_blank</i> '\n      )\n      .replace(\n        /^\\s*\\[x]\\s*/,\n        '<i class=\"material-icons\" style=\"vertical-align:top;margin-bottom:0.2em;margin-left:-0.8em;\">check_box</i> '\n      );\n    return `<li style=\"list-style: none;\">${text}</li>`;\n  }\n}\n\nexport function markDownTable(header: string, body: string): string {\n  return `<table class=\"table table-bordered\">\\n<thead>\\n${header}</thead>\\n<tbody>\\n${body}</tbody>\\n</table>\\n`;\n}\n\nexport function markDownCode(code: any, language: any): string {\n  const validLang = !!(language && hljs.getLanguage(language));\n  const highlighted = validLang ? hljs.highlight(language, code).value : code;\n  return `<pre style=\"padding: 0; border-radius: 0;\"><code class=\"hljs ${language}\">${highlighted}</code></pre>`;\n}\n","import {\n  Component,\n  ViewChild,\n  forwardRef,\n  Attribute,\n  Input,\n  AfterViewInit,\n  OnInit,\n  OnDestroy,\n  ElementRef,\n} from '@angular/core';\nimport {\n  NG_VALUE_ACCESSOR,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  Validator,\n  AbstractControl,\n  ValidationErrors,\n} from '@angular/forms';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatMarkdownEditorOptions } from '../lib.interface';\nimport { markDownCode, markDownTable, markDownListItem } from '../utils';\n\ndeclare let ace: any;\ndeclare let marked: any;\ndeclare let hljs: any;\n\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'mat-markdown-editor',\n  template: `\n    <div\n      class=\"md-editor-container\"\n      [class.fullscreen]=\"isFullScreen\"\n      [class.border]=\"options.showBorder\"\n      [class.md-editor-resizable]=\"options.resizable\"\n      [style.height]=\"options.height\"\n    >\n      <div class=\"md-layout\">\n        <mat-markdown-editor-toolbar\n          [options]=\"options\"\n          [editor]=\"editor\"\n          [isFullScreen]=\"isFullScreen\"\n          (onTogglePreview)=\"onTogglePreview($event)\"\n          (onFullScreen)=\"onFullScreen($event)\"\n        >\n        </mat-markdown-editor-toolbar>\n\n        <div class=\"editor-container\">\n          <div\n            class=\"editor-panel-container\"\n            [style.display]=\"options?.mode == 'preview' ? 'none' : null\"\n          >\n            <div class=\"editor-panel\">\n              <div class=\"ace-editor\" #aceEditor></div>\n            </div>\n          </div>\n          <div\n            [style.display]=\"showPreviewPanel ? 'block' : 'none'\"\n            (click)=\"previewPanelClick($event)\"\n          >\n            <div class=\"preview-panel\" [innerHTML]=\"previewHtml\"></div>\n          </div>\n        </div>\n        <div class=\"md-footer\" *ngIf=\"maxlength > 0 && options?.mode != 'preview'\">\n          <mat-toolbar>\n            <div class=\"text-right length-view\">\n              {{ markdownValue?.length }} / {{ maxlength }}\n            </div>\n            <div class=\"resize-btn\"></div>\n          </mat-toolbar>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .md-editor-container{position:relative;height:100%;margin-bottom:15px}.md-editor-container.border{border:1px solid rgba(0,0,0,.1)}.md-editor-container.fullscreen{margin:0;position:fixed;border:0;top:0;left:0;width:100%!important;height:100%!important;z-index:99}.md-editor-container.md-editor-resizable:not(.fullscreen){resize:both;overflow:auto;display:inline-block;width:100%}.md-editor-container.md-editor-resizable:not(.fullscreen) .md-footer{z-index:-1}.md-editor-container .md-layout{height:100%;display:flex;flex-direction:column}.md-editor-container .md-layout .editor-container{flex:1;display:flex}.md-editor-container .md-layout .editor-container>div{flex:1}.md-editor-container .md-layout .editor-container .editor-panel,.md-editor-container .md-layout .editor-container .editor-panel-container{height:100%}.md-editor-container .md-layout .editor-container .editor-panel .ace-editor{height:100%;min-height:100%}.md-editor-container .md-layout .preview-panel{height:100%;border-left:1px solid rgba(0,0,0,.1);background-color:#fff;padding:10px;overflow-y:auto}.md-editor-container .md-layout .preview-panel .material-icons{vertical-align:top;margin-bottom:.2em;margin-left:-.8em}.md-editor-container .md-layout .md-footer .length-view{flex:1;padding:4px 2px 0;font-size:12px;line-height:16px}.md-editor-container .md-layout .md-footer .resize-btn{width:17px}\n  `],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatMarkdownEditorComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => MatMarkdownEditorComponent),\n      multi: true,\n    },\n  ],\n})\nexport class MatMarkdownEditorComponent\n  implements ControlValueAccessor, Validator, OnInit, AfterViewInit, OnDestroy {\n  @ViewChild('aceEditor') public aceEditorContainer: ElementRef;\n  @Input() public options: MatMarkdownEditorOptions;\n\n  public showPreviewPanel = true;\n  public isFullScreen = false;\n  public previewHtml: any;\n  public editor: any;\n\n  private _renderMarkTimeout: any;\n  private _markdownValue: any;\n  private _options: any = {};\n  private _markedOpt: any;\n\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  public get markdownValue(): any {\n    return this._markdownValue || '';\n  }\n  public set markdownValue(value: any) {\n    this._markdownValue = value;\n    this._onChange(value);\n\n    if (this.options.preRender && this.options.preRender instanceof Function) {\n      value = this.options.preRender(value);\n    }\n    if (value !== null && value !== undefined) {\n      if (this._renderMarkTimeout) {\n        clearTimeout(this._renderMarkTimeout);\n      }\n      this._renderMarkTimeout = setTimeout(() => {\n        const html = marked(value || '', this._markedOpt);\n        this.previewHtml = this._domSanitizer.bypassSecurityTrustHtml(html);\n      }, 100);\n    }\n  }\n\n  constructor(\n    @Attribute('required') public required: boolean = false,\n    @Attribute('maxlength') public maxlength: number = -1,\n    private _domSanitizer: DomSanitizer\n  ) {}\n\n  ngOnInit() {\n    const editorElement = this.aceEditorContainer.nativeElement;\n    this.editor = ace.edit(editorElement);\n\n    const markedRender = new marked.Renderer();\n    markedRender.code = markDownCode;\n    markedRender.table = markDownTable;\n    markedRender.listitem = markDownListItem;\n    const markedjsOpt = {\n      renderer: markedRender,\n      highlight: (code: any) => hljs.highlightAuto(code).value,\n    };\n    this._markedOpt = Object.assign({}, this.options.markedjsOpt, markedjsOpt);\n  }\n\n  ngAfterViewInit() {\n    this.editor.$blockScrolling = Infinity;\n    this.editor.getSession().setUseWrapMode(true);\n    this.editor.getSession().setMode('ace/mode/markdown');\n    this.editor.setValue(this.markdownValue || '', 1);\n    this.editor.setOption('scrollPastEnd', this._options.scrollPastEnd || 0);\n    if (this.options.enableBasicAutocompletion) {\n      const langTools = ace.require('ace/ext/language_tools');\n      langTools.setCompleters([]);\n      langTools.addCompleter(this.options.completer);\n      this.editor.setOptions({\n        enableBasicAutocompletion: this.options.enableBasicAutocompletion,\n        enableLiveAutocompletion : this.options.enableLiveAutocompletion\n      });\n      if (this.options.fontSize) {\n        this.editor.setOptions({\n          fontSize : String(this.options.fontSize) + 'pt'\n        })\n      }\n    }\n    this.editor.on('change', () => {\n      this.markdownValue = this.editor.getValue();\n    });\n  }\n\n  writeValue(value: any | Array<any>): void {\n    setTimeout(() => {\n      this.markdownValue = value;\n      if (typeof value !== 'undefined' && this.editor) {\n        this.editor.setValue(value || '', 1);\n      }\n    }, 1);\n  }\n\n  registerOnChange(fn: (_: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors {\n    let result: any = null;\n    if (this.required && this.markdownValue.length === 0) {\n      result = { required: true };\n    }\n    if (this.maxlength > 0 && this.markdownValue.length > this.maxlength) {\n      result = { maxlength: true };\n    }\n    return result;\n  }\n\n  onTogglePreview(isOpen: boolean) {\n    this.showPreviewPanel = isOpen;\n  }\n\n  onFullScreen(isFullScreen: boolean) {\n    this.isFullScreen = isFullScreen;\n    this.editor.resize();\n  }\n\n  previewPanelClick(event: Event) {\n    if (this.options.enablePreviewContentClick !== true) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n\n  ngOnDestroy() {\n    return this.editor && this.editor.destroy();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class LibService {\n  constructor() { }\n  sayHello(name?: string) {\n    return `Hello ${name || 'Stanger'}!`;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  MatAutocompleteModule,\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatCardModule,\n  MatCheckboxModule,\n  MatChipsModule,\n  MatDatepickerModule,\n  MatDialogModule,\n  MatExpansionModule,\n  MatGridListModule,\n  MatIconModule,\n  MatInputModule,\n  MatListModule,\n  MatMenuModule,\n  MatNativeDateModule,\n  MatPaginatorModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatRadioModule,\n  MatRippleModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatSliderModule,\n  MatSlideToggleModule,\n  MatSnackBarModule,\n  MatSortModule,\n  MatTableModule,\n  MatTabsModule,\n  MatToolbarModule,\n  MatTooltipModule,\n  MatStepperModule,\n} from '@angular/material';\n\n@NgModule({\n  imports: [\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n  ],\n  exports: [\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n  ],\n})\nexport class MaterialModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  Renderer2,\n} from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'mat-markdown-editor-toolbar',\n  template: `\n    <mat-toolbar\n      [color]=\"options.toolbarColor\"\n      *ngIf=\"!options.hideToolbar && options?.mode != 'preview'\"\n      fxLayout=\"row\"\n      fxLayoutAlign=\"start center\"\n      fxLayoutGap=\"5px\"\n    >\n      <div class=\"btn-group\">\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Bold\"\n          (click)=\"insertContent('Bold')\"\n          *ngIf=\"!options?.hideIcons?.Bold\"\n        >\n          <mat-icon aria-label=\"bold\">format_bold</mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Italic\"\n          (click)=\"insertContent('Italic')\"\n          *ngIf=\"!options?.hideIcons?.Italic\"\n        >\n          <mat-icon aria-label=\"italic\">format_italic</mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Heading\"\n          (click)=\"insertContent('Heading')\"\n          *ngIf=\"!options?.hideIcons?.Heading\"\n        >\n          <mat-icon aria-label=\"italic\">format_size</mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Refrence\"\n          (click)=\"insertContent('Reference')\"\n          *ngIf=\"!options?.hideIcons?.Reference\"\n        >\n          <mat-icon aria-label=\"quote\">format_quote</mat-icon>\n        </button>\n        <mat-divider [vertical]=\"true\"></mat-divider>\n      </div>\n\n      <div class=\"btn-group\">\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Link\"\n          (click)=\"insertContent('Link')\"\n          *ngIf=\"!options?.hideIcons?.Link\"\n        >\n          <mat-icon aria-label=\"link\">link</mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Image\"\n          (click)=\"insertContent('Image')\"\n          *ngIf=\"!options?.hideIcons?.Image\"\n        >\n          <mat-icon aria-label=\"Image\">photo</mat-icon>\n        </button>\n        <mat-divider [vertical]=\"true\"></mat-divider>\n      </div>\n\n      <div class=\"btn-group\">\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Unordered List\"\n          (click)=\"insertContent('Ul')\"\n          *ngIf=\"!options?.hideIcons?.Ul\"\n        >\n          <mat-icon aria-label=\"Unordered List\">\n            format_list_bulleted\n          </mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Ordered List\"\n          (click)=\"insertContent('Ol')\"\n          *ngIf=\"!options?.hideIcons?.Ol\"\n        >\n          <mat-icon aria-label=\"Unordered List\">\n            format_list_numbered\n          </mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Code Block\"\n          (click)=\"insertContent('Code')\"\n          *ngIf=\"!options?.hideIcons?.Code\"\n        >\n          <mat-icon aria-label=\"code\">code</mat-icon>\n        </button>\n        <mat-divider [vertical]=\"true\"></mat-divider>\n      </div>\n\n      <div class=\"btn-group\">\n        <button\n          mat-icon-button\n          type=\"button\"\n          [matTooltip]=\"previewIsOpen ? 'Hide Preview' : 'Show Preview'\"\n          (click)=\"togglePreview()\"\n          *ngIf=\"!options?.hideIcons?.TogglePreview\"\n        >\n          <mat-icon aria-label=\"Unordered List\">{{\n            previewIsOpen ? 'visibility_off' : 'visibility'\n          }}</mat-icon>\n        </button>\n      </div>\n\n      <span fxFlex></span>\n\n      <div class=\"btn-group pull-right hide-split\">\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Full Screen Mode\"\n          [class.active]=\"isFullScreen\"\n          (click)=\"fullScreen()\"\n          *ngIf=\"!options?.hideIcons?.FullScreen && !isFullScreen\"\n        >\n          <mat-icon aria-label=\"fullscreen\">fullscreen</mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Exit Full Screen Mode\"\n          [class.active]=\"isFullScreen\"\n          (click)=\"fullScreen()\"\n          *ngIf=\"!options?.hideIcons?.FullScreen && isFullScreen\"\n        >\n          <mat-icon aria-label=\"fullscreen\">fullscreen_exit</mat-icon>\n        </button>\n      </div>\n    </mat-toolbar>\n  `,\n  styles: [`\n\n  `],\n})\nexport class EditorToolbarComponent {\n  @Input() public options: any;\n  @Input() public isFullScreen: boolean;\n  @Input() private editor: any;\n  @Output() public onTogglePreview = new EventEmitter();\n  @Output() public onFullScreen = new EventEmitter();\n\n  public previewIsOpen = true;\n  private _editorResizeTimer: any;\n\n  constructor(private _renderer: Renderer2) {}\n\n  insertContent(type: string, customContent?: string) {\n    if (!this.editor) {\n      return;\n    }\n    let selectedText = this.editor.getSelectedText();\n    let startSize = 2;\n    let initText = '';\n    const isSelected = !!selectedText;\n    const range = this.editor.selection.getRange();\n    switch (type) {\n      case 'Bold':\n        initText = 'Bold Text';\n        selectedText = `**${selectedText || initText}**`;\n        break;\n      case 'Italic':\n        initText = 'Italic Text';\n        selectedText = `*${selectedText || initText}*`;\n        startSize = 1;\n        break;\n      case 'Heading':\n        initText = 'Heading';\n        selectedText = `# ${selectedText || initText}`;\n        break;\n      case 'Reference':\n        initText = 'Reference';\n        selectedText = `> ${selectedText || initText}`;\n        break;\n      case 'Link':\n        selectedText = `[${selectedText}](http://)`;\n        startSize = 1;\n        break;\n      case 'Image':\n        selectedText = `![](http://)`;\n        break;\n      case 'Ul':\n        selectedText = `- ${selectedText || initText}`;\n        break;\n      case 'Ol':\n        selectedText = `1. ${selectedText || initText}`;\n        startSize = 3;\n        break;\n      case 'Code':\n        initText = 'Source Code';\n        selectedText =\n          '```language\\r\\n' + (selectedText || initText) + '\\r\\n```';\n        startSize = 3;\n        break;\n      case 'Custom':\n        selectedText = customContent;\n        startSize = 0;\n        break;\n    }\n    this.editor.session.replace(range, selectedText);\n    if (!isSelected) {\n      range.start.column += startSize;\n      range.end.column = range.start.column + initText.length;\n      this.editor.selection.setRange(range);\n    }\n    this.editor.focus();\n  }\n\n  togglePreview() {\n    this.previewIsOpen = !this.previewIsOpen;\n    this.onTogglePreview.emit(this.previewIsOpen);\n    this.editorResize();\n  }\n\n  fullScreen() {\n    this.isFullScreen = !this.isFullScreen;\n    this._renderer.setStyle(\n      document.body,\n      'overflowY',\n      this.isFullScreen ? 'hidden' : 'auto'\n    );\n    this.onFullScreen.emit(this.isFullScreen);\n    this.editorResize();\n  }\n\n  editorResize(timeOut: number = 100) {\n    if (!this.editor) {\n      return;\n    }\n    if (this._editorResizeTimer) {\n      clearTimeout(this._editorResizeTimer);\n    }\n    this._editorResizeTimer = setTimeout(() => {\n      this.editor.resize();\n      this.editor.focus();\n    }, timeOut);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatMarkdownEditorComponent } from './editor/editor.component';\nimport { LibService } from './service/lib.service';\nimport { MaterialModule } from './material.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { EditorToolbarComponent } from './editor/toolbar/toolbar.component';\n\nexport { MatMarkdownEditorComponent } from './editor/editor.component';\nexport { LibService } from './service/lib.service';\nexport { MatMarkdownEditorOptions, MarkedjsOption } from './lib.interface';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MaterialModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n  ],\n  exports: [MatMarkdownEditorComponent],\n  declarations: [MatMarkdownEditorComponent, EditorToolbarComponent],\n})\nexport class MatMarkdownEditorModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MatMarkdownEditorModule,\n      providers: [LibService],\n    };\n  }\n}\n"],"names":[],"mappings":"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"}