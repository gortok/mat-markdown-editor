{"version":3,"file":"mat-markdown-editor.umd.min.js","sources":["../../tmp/module/utils/index.ts","../../tmp/module/editor/editor.component.ts","../../tmp/module/service/lib.service.ts","../../tmp/module/material.module.ts","../../tmp/module/editor/toolbar/toolbar.component.ts","../../tmp/module/lib.module.ts"],"sourcesContent":["declare let hljs: any;\n\nexport function markDownListItem(text: string): string {\n  if (!/^\\s*\\[[x ]]\\s*/.test(text)) {\n    return `<li>${text}</li>`;\n  } else {\n    text = text\n      .replace(\n        /^\\s*\\[ ]\\s*/,\n        '<i class=\"material-icons\" style=\"vertical-align:top;margin-bottom:0.2em;margin-left:-0.8em;\">check_box_outline_blank</i> '\n      )\n      .replace(\n        /^\\s*\\[x]\\s*/,\n        '<i class=\"material-icons\" style=\"vertical-align:top;margin-bottom:0.2em;margin-left:-0.8em;\">check_box</i> '\n      );\n    return `<li style=\"list-style: none;\">${text}</li>`;\n  }\n}\n\nexport function markDownTable(header: string, body: string): string {\n  return `<table class=\"table table-bordered\">\\n<thead>\\n${header}</thead>\\n<tbody>\\n${body}</tbody>\\n</table>\\n`;\n}\n\nexport function markDownCode(code: any, language: any): string {\n  const validLang = !!(language && hljs.getLanguage(language));\n  const highlighted = validLang ? hljs.highlight(language, code).value : code;\n  return `<pre style=\"padding: 0; border-radius: 0;\"><code class=\"hljs ${language}\">${highlighted}</code></pre>`;\n}\n","import {\n  Component,\n  ViewChild,\n  forwardRef,\n  Attribute,\n  Input,\n  AfterViewInit,\n  OnInit,\n  OnDestroy,\n  ElementRef,\n} from '@angular/core';\nimport {\n  NG_VALUE_ACCESSOR,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  Validator,\n  AbstractControl,\n  ValidationErrors,\n} from '@angular/forms';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { MatMarkdownEditorOptions } from '../lib.interface';\nimport { markDownCode, markDownTable, markDownListItem } from '../utils';\n\ndeclare let ace: any;\ndeclare let marked: any;\ndeclare let hljs: any;\n\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'mat-markdown-editor',\n  template: `\n    <div\n      class=\"md-editor-container\"\n      [class.fullscreen]=\"isFullScreen\"\n      [class.border]=\"options.showBorder\"\n      [class.md-editor-resizable]=\"options.resizable\"\n      [style.height]=\"options.height\"\n    >\n      <div class=\"md-layout\">\n        <mat-markdown-editor-toolbar\n          [options]=\"options\"\n          [showPreviewPanel]=\"showPreviewPanel\"\n          [editor]=\"editor\"\n          [isFullScreen]=\"isFullScreen\"\n          (onTogglePreview)=\"onTogglePreview($event)\"\n          (onFullScreen)=\"onFullScreen($event)\"\n        >\n        </mat-markdown-editor-toolbar>\n\n        <div class=\"editor-container\">\n          <div\n            class=\"editor-panel-container\"\n            [style.display]=\"options?.mode == 'preview' ? 'none' : null\"\n          >\n            <div class=\"editor-panel\">\n              <div class=\"ace-editor\" #aceEditor></div>\n            </div>\n          </div>\n          <div\n            [style.display]=\"showPreviewPanel ? 'block' : 'none'\"\n            (click)=\"previewPanelClick($event)\"\n          >\n            <div class=\"preview-panel\" [innerHTML]=\"previewHtml\"></div>\n          </div>\n        </div>\n        <div class=\"md-footer\" *ngIf=\"maxlength > 0 && options?.mode != 'preview'\">\n          <mat-toolbar>\n            <div class=\"text-right length-view\">\n              {{ markdownValue?.length }} / {{ maxlength }}\n            </div>\n            <div class=\"resize-btn\"></div>\n          </mat-toolbar>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .md-editor-container{position:relative;height:100%;margin-bottom:15px}.md-editor-container.border{border:1px solid rgba(0,0,0,.1)}.md-editor-container.fullscreen{margin:0;position:fixed;border:0;top:0;left:0;width:100%!important;height:100%!important;z-index:99}.md-editor-container.md-editor-resizable:not(.fullscreen){resize:both;overflow:auto;display:inline-block;width:100%}.md-editor-container.md-editor-resizable:not(.fullscreen) .md-footer{z-index:-1}.md-editor-container .md-layout{height:100%;display:flex;flex-direction:column}.md-editor-container .md-layout .editor-container{flex:1;display:flex}.md-editor-container .md-layout .editor-container>div{flex:1}.md-editor-container .md-layout .editor-container .editor-panel,.md-editor-container .md-layout .editor-container .editor-panel-container{height:100%}.md-editor-container .md-layout .editor-container .editor-panel .ace-editor{height:100%;min-height:100%}.md-editor-container .md-layout .preview-panel{height:100%;border-left:1px solid rgba(0,0,0,.1);background-color:#fff;padding:10px;overflow-y:auto}.md-editor-container .md-layout .preview-panel .material-icons{vertical-align:top;margin-bottom:.2em;margin-left:-.8em}.md-editor-container .md-layout .md-footer .length-view{flex:1;padding:4px 2px 0;font-size:12px;line-height:16px}.md-editor-container .md-layout .md-footer .resize-btn{width:17px}\n  `],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatMarkdownEditorComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => MatMarkdownEditorComponent),\n      multi: true,\n    },\n  ],\n})\nexport class MatMarkdownEditorComponent\n  implements ControlValueAccessor, Validator, OnInit, AfterViewInit, OnDestroy {\n  @ViewChild('aceEditor') public aceEditorContainer: ElementRef;\n  @Input() public options: MatMarkdownEditorOptions;\n\n  @Input() public showPreviewPanel = true;\n  public isFullScreen = false;\n  public previewHtml: any;\n  public editor: any;\n\n  private _renderMarkTimeout: any;\n  private _markdownValue: any;\n  private _options: any = {};\n  private _markedOpt: any;\n\n  private _onChange = (_: any) => {};\n  private _onTouched = () => {};\n\n  public get markdownValue(): any {\n    return this._markdownValue || '';\n  }\n  public set markdownValue(value: any) {\n    this._markdownValue = value;\n    this._onChange(value);\n\n    if (this.options.preRender && this.options.preRender instanceof Function) {\n      value = this.options.preRender(value);\n    }\n    if (value !== null && value !== undefined) {\n      if (this._renderMarkTimeout) {\n        clearTimeout(this._renderMarkTimeout);\n      }\n      this._renderMarkTimeout = setTimeout(() => {\n        const html = marked(value || '', this._markedOpt);\n        this.previewHtml = this._domSanitizer.bypassSecurityTrustHtml(html);\n      }, 100);\n    }\n  }\n\n  constructor(\n    @Attribute('required') public required: boolean = false,\n    @Attribute('maxlength') public maxlength: number = -1,\n    private _domSanitizer: DomSanitizer\n  ) {}\n\n  ngOnInit() {\n    const editorElement = this.aceEditorContainer.nativeElement;\n    this.editor = ace.edit(editorElement);\n\n    const markedRender = new marked.Renderer();\n    markedRender.code = markDownCode;\n    markedRender.table = markDownTable;\n    markedRender.listitem = markDownListItem;\n    const markedjsOpt = {\n      renderer: markedRender,\n      highlight: (code: any) => hljs.highlightAuto(code).value,\n    };\n    this._markedOpt = Object.assign({}, this.options.markedjsOpt, markedjsOpt);\n  }\n\n  ngAfterViewInit() {\n    this.editor.$blockScrolling = Infinity;\n    this.editor.getSession().setUseWrapMode(true);\n    this.editor.getSession().setMode('ace/mode/markdown');\n    this.editor.setValue(this.markdownValue || '', 1);\n    this.editor.setOption('scrollPastEnd', this._options.scrollPastEnd || 0);\n    if (this.options.enableBasicAutocompletion) {\n      const langTools = ace.require('ace/ext/language_tools');\n      langTools.setCompleters([]);\n      langTools.addCompleter(this.options.completer);\n      this.editor.setOptions({\n        enableBasicAutocompletion: this.options.enableBasicAutocompletion,\n        enableLiveAutocompletion : this.options.enableLiveAutocompletion\n      });\n      if (this.options.fontSize) {\n        this.editor.setOptions({\n          fontSize : String(this.options.fontSize) + 'pt'\n        })\n      }\n    }\n    this.editor.on('change', () => {\n      this.markdownValue = this.editor.getValue();\n    });\n  }\n\n  writeValue(value: any | Array<any>): void {\n    setTimeout(() => {\n      this.markdownValue = value;\n      if (typeof value !== 'undefined' && this.editor) {\n        this.editor.setValue(value || '', 1);\n      }\n    }, 1);\n  }\n\n  registerOnChange(fn: (_: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  validate(c: AbstractControl): ValidationErrors {\n    let result: any = null;\n    if (this.required && this.markdownValue.length === 0) {\n      result = { required: true };\n    }\n    if (this.maxlength > 0 && this.markdownValue.length > this.maxlength) {\n      result = { maxlength: true };\n    }\n    return result;\n  }\n\n  onTogglePreview(isOpen: boolean) {\n    this.showPreviewPanel = isOpen;\n  }\n\n  onFullScreen(isFullScreen: boolean) {\n    this.isFullScreen = isFullScreen;\n    this.editor.resize();\n  }\n\n  previewPanelClick(event: Event) {\n    if (this.options.enablePreviewContentClick !== true) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n\n  ngOnDestroy() {\n    return this.editor && this.editor.destroy();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class LibService {\n  constructor() { }\n  sayHello(name?: string) {\n    return `Hello ${name || 'Stanger'}!`;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  MatAutocompleteModule,\n  MatButtonModule,\n  MatButtonToggleModule,\n  MatCardModule,\n  MatCheckboxModule,\n  MatChipsModule,\n  MatDatepickerModule,\n  MatDialogModule,\n  MatExpansionModule,\n  MatGridListModule,\n  MatIconModule,\n  MatInputModule,\n  MatListModule,\n  MatMenuModule,\n  MatNativeDateModule,\n  MatPaginatorModule,\n  MatProgressBarModule,\n  MatProgressSpinnerModule,\n  MatRadioModule,\n  MatRippleModule,\n  MatSelectModule,\n  MatSidenavModule,\n  MatSliderModule,\n  MatSlideToggleModule,\n  MatSnackBarModule,\n  MatSortModule,\n  MatTableModule,\n  MatTabsModule,\n  MatToolbarModule,\n  MatTooltipModule,\n  MatStepperModule,\n} from '@angular/material';\n\n@NgModule({\n  imports: [\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n  ],\n  exports: [\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n  ],\n})\nexport class MaterialModule {}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  Renderer2,\n} from '@angular/core';\n\n@Component({\n  // tslint:disable-next-line: component-selector\n  selector: 'mat-markdown-editor-toolbar',\n  template: `\n    <mat-toolbar\n      [color]=\"options.toolbarColor\"\n      *ngIf=\"!options.hideToolbar && options?.mode != 'preview'\"\n      fxLayout=\"row\"\n      fxLayoutAlign=\"start center\"\n      fxLayoutGap=\"5px\"\n    >\n      <div class=\"btn-group\">\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Bold\"\n          (click)=\"insertContent('Bold')\"\n          *ngIf=\"!options?.hideIcons?.Bold\"\n        >\n          <mat-icon aria-label=\"bold\">format_bold</mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Italic\"\n          (click)=\"insertContent('Italic')\"\n          *ngIf=\"!options?.hideIcons?.Italic\"\n        >\n          <mat-icon aria-label=\"italic\">format_italic</mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Heading\"\n          (click)=\"insertContent('Heading')\"\n          *ngIf=\"!options?.hideIcons?.Heading\"\n        >\n          <mat-icon aria-label=\"italic\">format_size</mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Refrence\"\n          (click)=\"insertContent('Reference')\"\n          *ngIf=\"!options?.hideIcons?.Reference\"\n        >\n          <mat-icon aria-label=\"quote\">format_quote</mat-icon>\n        </button>\n        <mat-divider [vertical]=\"true\"></mat-divider>\n      </div>\n\n      <div class=\"btn-group\">\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Link\"\n          (click)=\"insertContent('Link')\"\n          *ngIf=\"!options?.hideIcons?.Link\"\n        >\n          <mat-icon aria-label=\"link\">link</mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Image\"\n          (click)=\"insertContent('Image')\"\n          *ngIf=\"!options?.hideIcons?.Image\"\n        >\n          <mat-icon aria-label=\"Image\">photo</mat-icon>\n        </button>\n        <mat-divider [vertical]=\"true\"></mat-divider>\n      </div>\n\n      <div class=\"btn-group\">\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Unordered List\"\n          (click)=\"insertContent('Ul')\"\n          *ngIf=\"!options?.hideIcons?.Ul\"\n        >\n          <mat-icon aria-label=\"Unordered List\">\n            format_list_bulleted\n          </mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Ordered List\"\n          (click)=\"insertContent('Ol')\"\n          *ngIf=\"!options?.hideIcons?.Ol\"\n        >\n          <mat-icon aria-label=\"Unordered List\">\n            format_list_numbered\n          </mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Code Block\"\n          (click)=\"insertContent('Code')\"\n          *ngIf=\"!options?.hideIcons?.Code\"\n        >\n          <mat-icon aria-label=\"code\">code</mat-icon>\n        </button>\n        <mat-divider [vertical]=\"true\"></mat-divider>\n      </div>\n\n      <div class=\"btn-group\">\n        <button\n          mat-icon-button\n          type=\"button\"\n          [matTooltip]=\"previewIsOpen ? 'Hide Preview' : 'Show Preview'\"\n          (click)=\"togglePreview()\"\n          *ngIf=\"!options?.hideIcons?.TogglePreview\"\n        >\n          <mat-icon aria-label=\"Unordered List\">{{\n            previewIsOpen ? 'visibility_off' : 'visibility'\n          }}</mat-icon>\n        </button>\n      </div>\n\n      <span fxFlex></span>\n\n      <div class=\"btn-group pull-right hide-split\">\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Full Screen Mode\"\n          [class.active]=\"isFullScreen\"\n          (click)=\"fullScreen()\"\n          *ngIf=\"!options?.hideIcons?.FullScreen && !isFullScreen\"\n        >\n          <mat-icon aria-label=\"fullscreen\">fullscreen</mat-icon>\n        </button>\n        <button\n          mat-icon-button\n          type=\"button\"\n          matTooltip=\"Exit Full Screen Mode\"\n          [class.active]=\"isFullScreen\"\n          (click)=\"fullScreen()\"\n          *ngIf=\"!options?.hideIcons?.FullScreen && isFullScreen\"\n        >\n          <mat-icon aria-label=\"fullscreen\">fullscreen_exit</mat-icon>\n        </button>\n      </div>\n    </mat-toolbar>\n  `,\n  styles: [`\n\n  `],\n})\nexport class EditorToolbarComponent {\n  @Input() public options: any;\n  @Input() public isFullScreen: boolean;\n  @Input() private editor: any;\n  @Output() public onTogglePreview = new EventEmitter();\n  @Output() public onFullScreen = new EventEmitter();\n\n  public previewIsOpen = true;\n  private _editorResizeTimer: any;\n\n  constructor(private _renderer: Renderer2) {}\n\n  insertContent(type: string, customContent?: string) {\n    if (!this.editor) {\n      return;\n    }\n    let selectedText = this.editor.getSelectedText();\n    let startSize = 2;\n    let initText = '';\n    const isSelected = !!selectedText;\n    const range = this.editor.selection.getRange();\n    switch (type) {\n      case 'Bold':\n        initText = 'Bold Text';\n        selectedText = `**${selectedText || initText}**`;\n        break;\n      case 'Italic':\n        initText = 'Italic Text';\n        selectedText = `*${selectedText || initText}*`;\n        startSize = 1;\n        break;\n      case 'Heading':\n        initText = 'Heading';\n        selectedText = `# ${selectedText || initText}`;\n        break;\n      case 'Reference':\n        initText = 'Reference';\n        selectedText = `> ${selectedText || initText}`;\n        break;\n      case 'Link':\n        selectedText = `[${selectedText}](http://)`;\n        startSize = 1;\n        break;\n      case 'Image':\n        selectedText = `![](http://)`;\n        break;\n      case 'Ul':\n        selectedText = `- ${selectedText || initText}`;\n        break;\n      case 'Ol':\n        selectedText = `1. ${selectedText || initText}`;\n        startSize = 3;\n        break;\n      case 'Code':\n        initText = 'Source Code';\n        selectedText =\n          '```language\\r\\n' + (selectedText || initText) + '\\r\\n```';\n        startSize = 3;\n        break;\n      case 'Custom':\n        selectedText = customContent;\n        startSize = 0;\n        break;\n    }\n    this.editor.session.replace(range, selectedText);\n    if (!isSelected) {\n      range.start.column += startSize;\n      range.end.column = range.start.column + initText.length;\n      this.editor.selection.setRange(range);\n    }\n    this.editor.focus();\n  }\n\n  togglePreview() {\n    this.previewIsOpen = !this.previewIsOpen;\n    this.onTogglePreview.emit(this.previewIsOpen);\n    this.editorResize();\n  }\n\n  fullScreen() {\n    this.isFullScreen = !this.isFullScreen;\n    this._renderer.setStyle(\n      document.body,\n      'overflowY',\n      this.isFullScreen ? 'hidden' : 'auto'\n    );\n    this.onFullScreen.emit(this.isFullScreen);\n    this.editorResize();\n  }\n\n  editorResize(timeOut: number = 100) {\n    if (!this.editor) {\n      return;\n    }\n    if (this._editorResizeTimer) {\n      clearTimeout(this._editorResizeTimer);\n    }\n    this._editorResizeTimer = setTimeout(() => {\n      this.editor.resize();\n      this.editor.focus();\n    }, timeOut);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MatMarkdownEditorComponent } from './editor/editor.component';\nimport { LibService } from './service/lib.service';\nimport { MaterialModule } from './material.module';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { EditorToolbarComponent } from './editor/toolbar/toolbar.component';\n\nexport { MatMarkdownEditorComponent } from './editor/editor.component';\nexport { LibService } from './service/lib.service';\nexport { MatMarkdownEditorOptions, MarkedjsOption } from './lib.interface';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    MaterialModule,\n    ReactiveFormsModule,\n    FlexLayoutModule,\n  ],\n  exports: [MatMarkdownEditorComponent],\n  declarations: [MatMarkdownEditorComponent, EditorToolbarComponent],\n})\nexport class MatMarkdownEditorModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MatMarkdownEditorModule,\n      providers: [LibService],\n    };\n  }\n}\n"],"names":["markDownListItem","text","test","replace","markDownTable","header","body","markDownCode","code","language","hljs","getLanguage","highlight","value","required","maxlength","_domSanitizer","this","_","Object","MatMarkdownEditorComponent","_markdownValue","_onChange","options","preRender","Function","undefined","_renderMarkTimeout","clearTimeout","setTimeout","html","marked","_this","_markedOpt","previewHtml","bypassSecurityTrustHtml","editorElement","aceEditorContainer","nativeElement","editor","ace","edit","markedRender","Renderer","table","listitem","markedjsOpt","renderer","highlightAuto","assign","$blockScrolling","Infinity","getSession","setUseWrapMode","setMode","setValue","markdownValue","setOption","_options","scrollPastEnd","enableBasicAutocompletion","langTools","require","setCompleters","addCompleter","completer","setOptions","enableLiveAutocompletion","fontSize","String","on","getValue","fn","_onTouched","c","result","length","isOpen","showPreviewPanel","isFullScreen","resize","event","enablePreviewContentClick","preventDefault","stopImmediatePropagation","destroy","Component","selector","template","styles","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","Attribute","DomSanitizer","ViewChild","Input","LibService","name","Injectable","NgModule","imports","MatAutocompleteModule","MatButtonModule","MatButtonToggleModule","MatCardModule","MatCheckboxModule","MatChipsModule","MatStepperModule","MatDatepickerModule","MatDialogModule","MatExpansionModule","MatGridListModule","MatIconModule","MatInputModule","MatListModule","MatMenuModule","MatNativeDateModule","MatPaginatorModule","MatProgressBarModule","MatProgressSpinnerModule","MatRadioModule","MatRippleModule","MatSelectModule","MatSidenavModule","MatSliderModule","MatSlideToggleModule","MatSnackBarModule","MatSortModule","MatTableModule","MatTabsModule","MatToolbarModule","MatTooltipModule","exports","_renderer","EventEmitter","EditorToolbarComponent","type","customContent","selectedText","getSelectedText","startSize","initText","isSelected","range","selection","getRange","session","start","column","end","setRange","focus","previewIsOpen","onTogglePreview","emit","editorResize","setStyle","document","onFullScreen","timeOut","_editorResizeTimer","Renderer2","Output","MatMarkdownEditorModule","ngModule","CommonModule","FormsModule","MaterialModule","ReactiveFormsModule","FlexLayoutModule","declarations"],"mappings":"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"}